generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  username           String        @unique
  email              String        @unique
  passwordHash       String?
  profileImageUrl    String?
  bio                String?
  rating             Float         @default(0.0)
  ratingCount        Int           @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  accounts           Account[]
  commentLikes       CommentLike[] @relation("CommentLikes")
  comments           Comment[]     @relation("CommentAuthors")
  deckLikes          DeckLike[]    @relation("DeckLikes")
  decks              Deck[]
  listings           Listing[]
  receivedMessages   Message[]     @relation("ReceivedMessages")
  sentMessages       Message[]     @relation("SentMessages")
  postLikes          PostLike[]    @relation("PostLikes")
  posts              Post[]
  reviews            Review[]      @relation("ReviewedUsers")
  givenReviews       Review[]      @relation("ReviewGivers")
  sessions           Session[]
  buyerTransactions  Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")

  @@map("users")
}

model Card {
  id             String     @id @default(cuid())
  name           String
  gameTitle      String
  imageUrl       String?
  rarity         String?
  effectText     String?
  cardNumber     String?
  expansion      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  apiId          String?    @unique
  artist         String?
  cardType       String?
  cardTypeJa     String?
  effectTextJa   String?
  evolveFrom     String?
  evolveFromJa   String?
  expansionJa    String?
  hp             Int?
  nameJa         String?
  regulationMark String?
  releaseDate    String?
  subtypes       String?
  subtypesJa     String?
  types          String?
  typesJa        String?
  // --- JSON型フィールド追加 ---
  attacks        Json?
  abilities      Json?
  weaknesses     Json?
  resistances    Json?
  retreatCost    Json?
  rules          Json?
  legalities     Json?
  nationalPokedexNumbers Json?
  // --- 既存 ---
  deckCards      DeckCard[]
  listings       Listing[]
  posts          Post[]     @relation("PostCards")
  prices         Price[]

  @@map("cards")
}

model Price {
  id         String   @id @default(cuid())
  cardId     String
  source     String
  price      Int
  condition  String?
  recordedAt DateTime @default(now())
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("prices")
}

model Listing {
  id           String        @id @default(cuid())
  userId       String
  cardId       String
  listingType  ListingType
  price        Int?
  condition    String?
  description  String?
  status       ListingStatus @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  card         Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("listings")
}

model Transaction {
  id          String            @id @default(cuid())
  listingId   String
  buyerId     String
  sellerId    String
  price       Int
  status      TransactionStatus @default(PENDING)
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  review      Review?
  buyer       User              @relation("BuyerTransactions", fields: [buyerId], references: [id])
  listing     Listing           @relation(fields: [listingId], references: [id])
  seller      User              @relation("SellerTransactions", fields: [sellerId], references: [id])

  @@map("transactions")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id            String      @id @default(cuid())
  transactionId String      @unique
  reviewerId    String
  revieweeId    String
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  reviewee      User        @relation("ReviewedUsers", fields: [revieweeId], references: [id])
  reviewer      User        @relation("ReviewGivers", fields: [reviewerId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("reviews")
}

model Deck {
  id            String     @id @default(cuid())
  userId        String
  name          String
  description   String?
  gameTitle     String
  format        String?
  isPublic      Boolean    @default(false)
  likeCount     Int        @default(0)
  viewCount     Int        @default(0)
  coverImageUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deckCards     DeckCard[]
  deckLikes     DeckLike[]
  deckTags      DeckTag[]
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("decks")
}

model DeckCard {
  id       String @id @default(cuid())
  deckId   String
  cardId   String
  quantity Int    @default(1)
  card     Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([deckId, cardId])
  @@map("deck_cards")
}

model DeckTag {
  id        String   @id @default(cuid())
  deckId    String
  tagName   String
  createdAt DateTime @default(now())
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([deckId, tagName])
  @@map("deck_tags")
}

model DeckLike {
  id        String   @id @default(cuid())
  deckId    String
  userId    String
  createdAt DateTime @default(now())
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  user      User     @relation("DeckLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deckId, userId])
  @@map("deck_likes")
}

model Post {
  id        String       @id @default(cuid())
  title     String
  content   String
  category  PostCategory
  tags      String[]
  viewCount Int          @default(0)
  likeCount Int          @default(0)
  isPinned  Boolean      @default(false)
  isLocked  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  authorId  String
  cardId    String?
  comments  Comment[]
  likes     PostLike[]
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  card      Card?        @relation("PostCards", fields: [cardId], references: [id])

  @@map("posts")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  likeCount Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    String
  authorId  String
  parentId  String?
  likes     CommentLike[]
  author    User          @relation("CommentAuthors", fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("PostLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("CommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_likes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum ListingType {
  SELL
  BUY
  TRADE

  @@map("listing_type")
}

enum ListingStatus {
  ACTIVE
  COMPLETED
  CANCELLED

  @@map("listing_status")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED

  @@map("transaction_status")
}

enum PostCategory {
  GENERAL
  QUESTION
  DECK
  TRADE
  NEWS
  STRATEGY
  COLLECTION

  @@map("post_category")
}
